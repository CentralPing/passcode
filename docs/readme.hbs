# @CentralPing/passcode

[![Build Status](https://travis-ci.org/CentralPing/passcode.svg?branch=master)](https://travis-ci.org/CentralPing/passcode)
[![Coverage Status](https://coveralls.io/repos/github/CentralPing/passcode/badge.svg)](https://coveralls.io/github/CentralPing/passcode)
[![Dependency Status](https://david-dm.org/CentralPing/passcode.svg)](https://david-dm.org/CentralPing/passcode)
[![Greenkeeper Status](https://badges.greenkeeper.io/CentralPing/passcode.svg)](https://greenkeeper.io/)
[![Known Vulnerabilities](https://snyk.io/test/github/centralping/passcode/badge.svg)](https://snyk.io/test/github/centralping/passcode)

A slightly opinionated stateless passcode manager.

As with all JWTs, extreme care should be employed if including any sensitive information in the payload.

## Installation

`npm i --save https://github.com/CentralPing/passcode`

## API Reference

{{#module name="passcode"~}}
{{>body~}}
{{>members~}}
{{/module}}

## Examples

### For Simple Verification

```js
const {issue, verify} = require('passcode');
const {v4} = require('uuid');

const secret = v4();

// Generate a token with random passcode
const {error, value: {id, expires, code, token}} = issue({}, {secret});
/**
 * Do something with the token
 */
// Verify token with code
const {error, value} = verify(token, {secret, code});
```

### For Verification With Meta Information

```js
const {issue, verify} = require('passcode');
const {v4} = require('uuid');

const salt = v4();
const secret = v4();

// Generate a token with custom payload
const {error, value: {id, expires, code, token}} = issue(
  {email: 'foo@bar.com'},
  {secret}
);
/**
 * Do something with the token
 */
// Verify token with code
const {error, {email}} = verify(token, {secret, code});
```

### For Hashing Challenge Code
By default challenge codes are stored as a string in the payload of the JWT. Providing a salt (as well as other hashing options) can provide a bit more security.

```js
const {issue, verify} = require('passcode');
const {v4} = require('uuid');

const secret = v4();
const salt = v4();

// Generate a token with random passcode
const {error, value: {id, expires, code, token}} = issue({}, {secret}, {salt});
/**
 * Do something with the token
 */
// Verify token with code
const {error, value} = verify(token, {secret, code}, {salt});
```

## License

MIT
